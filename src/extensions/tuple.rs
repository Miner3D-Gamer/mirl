use std::ops::{Add,Div,Mul,Sub};pub trait TupleOps<Rhs=Self>{type Output;fn add(self,rhs:Rhs)->Self::Output;fn sub(self,rhs:Rhs)->Self::Output;fn mul(self,rhs:Rhs)->Self::Output;fn div(self,rhs:Rhs)->Self::Output;}impl<T>TupleOps for(T,T)where T:Add<Output=T>+Sub<Output=T>+Mul<Output=T>+Div<Output=T>+Copy,{type Output=(T,T);fn add(self,rhs:Self)->Self::Output{(self.0+rhs.0,self.1+rhs.1)}fn sub(self,rhs:Self)->Self::Output{(self.0-rhs.0,self.1-rhs.1)}fn mul(self,rhs:Self)->Self::Output{(self.0*rhs.0,self.1*rhs.1)}fn div(self,rhs:Self)->Self::Output{(self.0/rhs.0,self.1/rhs.1)}}impl<T>TupleOps for(T,T,T)where T:Add<Output=T>+Sub<Output=T>+Mul<Output=T>+Div<Output=T>+Copy,{type Output=(T,T,T);fn add(self,rhs:Self)->Self::Output{(self.0+rhs.0,self.1+rhs.1,self.2+rhs.2)}fn sub(self,rhs:Self)->Self::Output{(self.0-rhs.0,self.1-rhs.1,self.2-rhs.2)}fn mul(self,rhs:Self)->Self::Output{(self.0*rhs.0,self.1*rhs.1,self.2*rhs.2)}fn div(self,rhs:Self)->Self::Output{(self.0/rhs.0,self.1/rhs.1,self.2/rhs.2)}}impl<T>TupleOps for(T,T,T,T)where T:Add<Output=T>+Sub<Output=T>+Mul<Output=T>+Div<Output=T>+Copy,{type Output=(T,T,T,T);fn add(self,rhs:Self)->Self::Output{(self.0+rhs.0,self.1+rhs.1,self.2+rhs.2,self.3+rhs.3)}fn sub(self,rhs:Self)->Self::Output{(self.0-rhs.0,self.1-rhs.1,self.2-rhs.2,self.3-rhs.3)}fn mul(self,rhs:Self)->Self::Output{(self.0*rhs.0,self.1*rhs.1,self.2*rhs.2,self.3*rhs.3)}fn div(self,rhs:Self)->Self::Output{(self.0/rhs.0,self.1/rhs.1,self.2/rhs.2,self.3/rhs.3)}}impl<T>TupleOps for(T,T,T,T,T)where T:Add<Output=T>+Sub<Output=T>+Mul<Output=T>+Div<Output=T>+Copy,{type Output=(T,T,T,T,T);fn add(self,rhs:Self)->Self::Output{(self.0+rhs.0,self.1+rhs.1,self.2+rhs.2,self.3+rhs.3,self.4+rhs.4)}fn sub(self,rhs:Self)->Self::Output{(self.0-rhs.0,self.1-rhs.1,self.2-rhs.2,self.3-rhs.3,self.4-rhs.4)}fn mul(self,rhs:Self)->Self::Output{(self.0*rhs.0,self.1*rhs.1,self.2*rhs.2,self.3*rhs.3,self.4*rhs.4)}fn div(self,rhs:Self)->Self::Output{(self.0/rhs.0,self.1/rhs.1,self.2/rhs.2,self.3/rhs.3,self.4/rhs.4)}}impl<T>TupleOps for(T,T,T,T,T,T)where T:Add<Output=T>+Sub<Output=T>+Mul<Output=T>+Div<Output=T>+Copy,{type Output=(T,T,T,T,T,T);fn add(self,rhs:Self)->Self::Output{(self.0+rhs.0,self.1+rhs.1,self.2+rhs.2,self.3+rhs.3,self.4+rhs.4,self.5+rhs.5)}fn sub(self,rhs:Self)->Self::Output{(self.0-rhs.0,self.1-rhs.1,self.2-rhs.2,self.3-rhs.3,self.4-rhs.4,self.5-rhs.5)}fn mul(self,rhs:Self)->Self::Output{(self.0*rhs.0,self.1*rhs.1,self.2*rhs.2,self.3*rhs.3,self.4*rhs.4,self.5*rhs.5)}fn div(self,rhs:Self)->Self::Output{(self.0/rhs.0,self.1/rhs.1,self.2/rhs.2,self.3/rhs.3,self.4/rhs.4,self.5/rhs.5)}}impl<T>TupleOps for(T,T,T,T,T,T,T)where T:Add<Output=T>+Sub<Output=T>+Mul<Output=T>+Div<Output=T>+Copy,{type Output=(T,T,T,T,T,T,T);fn add(self,rhs:Self)->Self::Output{(self.0+rhs.0,self.1+rhs.1,self.2+rhs.2,self.3+rhs.3,self.4+rhs.4,self.5+rhs.5,self.6+rhs.6)}fn sub(self,rhs:Self)->Self::Output{(self.0-rhs.0,self.1-rhs.1,self.2-rhs.2,self.3-rhs.3,self.4-rhs.4,self.5-rhs.5,self.6-rhs.6)}fn mul(self,rhs:Self)->Self::Output{(self.0*rhs.0,self.1*rhs.1,self.2*rhs.2,self.3*rhs.3,self.4*rhs.4,self.5*rhs.5,self.6*rhs.6)}fn div(self,rhs:Self)->Self::Output{(self.0/rhs.0,self.1/rhs.1,self.2/rhs.2,self.3/rhs.3,self.4/rhs.4,self.5/rhs.5,self.6/rhs.6)}}impl<T>TupleOps for(T,T,T,T,T,T,T,T)where T:Add<Output=T>+Sub<Output=T>+Mul<Output=T>+Div<Output=T>+Copy,{type Output=(T,T,T,T,T,T,T,T);fn add(self,rhs:Self)->Self::Output{(self.0+rhs.0,self.1+rhs.1,self.2+rhs.2,self.3+rhs.3,self.4+rhs.4,self.5+rhs.5,self.6+rhs.6,self.7+rhs.7)}fn sub(self,rhs:Self)->Self::Output{(self.0-rhs.0,self.1-rhs.1,self.2-rhs.2,self.3-rhs.3,self.4-rhs.4,self.5-rhs.5,self.6-rhs.6,self.7-rhs.7)}fn mul(self,rhs:Self)->Self::Output{(self.0*rhs.0,self.1*rhs.1,self.2*rhs.2,self.3*rhs.3,self.4*rhs.4,self.5*rhs.5,self.6*rhs.6,self.7*rhs.7)}fn div(self,rhs:Self)->Self::Output{(self.0/rhs.0,self.1/rhs.1,self.2/rhs.2,self.3/rhs.3,self.4/rhs.4,self.5/rhs.5,self.6/rhs.6,self.7/rhs.7)}}impl<T>TupleOps for(T,T,T,T,T,T,T,T,T)where T:Add<Output=T>+Sub<Output=T>+Mul<Output=T>+Div<Output=T>+Copy,{type Output=(T,T,T,T,T,T,T,T,T);fn add(self,rhs:Self)->Self::Output{(self.0+rhs.0,self.1+rhs.1,self.2+rhs.2,self.3+rhs.3,self.4+rhs.4,self.5+rhs.5,self.6+rhs.6,self.7+rhs.7,self.8+rhs.8)}fn sub(self,rhs:Self)->Self::Output{(self.0-rhs.0,self.1-rhs.1,self.2-rhs.2,self.3-rhs.3,self.4-rhs.4,self.5-rhs.5,self.6-rhs.6,self.7-rhs.7,self.8-rhs.8)}fn mul(self,rhs:Self)->Self::Output{(self.0*rhs.0,self.1*rhs.1,self.2*rhs.2,self.3*rhs.3,self.4*rhs.4,self.5*rhs.5,self.6*rhs.6,self.7*rhs.7,self.8*rhs.8)}fn div(self,rhs:Self)->Self::Output{(self.0/rhs.0,self.1/rhs.1,self.2/rhs.2,self.3/rhs.3,self.4/rhs.4,self.5/rhs.5,self.6/rhs.6,self.7/rhs.7,self.8/rhs.8)}}impl<T>TupleOps for(T,T,T,T,T,T,T,T,T,T)where T:Add<Output=T>+Sub<Output=T>+Mul<Output=T>+Div<Output=T>+Copy,{type Output=(T,T,T,T,T,T,T,T,T,T);fn add(self,rhs:Self)->Self::Output{(self.0+rhs.0,self.1+rhs.1,self.2+rhs.2,self.3+rhs.3,self.4+rhs.4,self.5+rhs.5,self.6+rhs.6,self.7+rhs.7,self.8+rhs.8,self.9+rhs.9)}fn sub(self,rhs:Self)->Self::Output{(self.0-rhs.0,self.1-rhs.1,self.2-rhs.2,self.3-rhs.3,self.4-rhs.4,self.5-rhs.5,self.6-rhs.6,self.7-rhs.7,self.8-rhs.8,self.9-rhs.9)}fn mul(self,rhs:Self)->Self::Output{(self.0*rhs.0,self.1*rhs.1,self.2*rhs.2,self.3*rhs.3,self.4*rhs.4,self.5*rhs.5,self.6*rhs.6,self.7*rhs.7,self.8*rhs.8,self.9*rhs.9)}fn div(self,rhs:Self)->Self::Output{(self.0/rhs.0,self.1/rhs.1,self.2/rhs.2,self.3/rhs.3,self.4/rhs.4,self.5/rhs.5,self.6/rhs.6,self.7/rhs.7,self.8/rhs.8,self.9/rhs.9)}}impl<T>TupleOps for(T,T,T,T,T,T,T,T,T,T,T)where T:Add<Output=T>+Sub<Output=T>+Mul<Output=T>+Div<Output=T>+Copy,{type Output=(T,T,T,T,T,T,T,T,T,T,T);fn add(self,rhs:Self)->Self::Output{(self.0+rhs.0,self.1+rhs.1,self.2+rhs.2,self.3+rhs.3,self.4+rhs.4,self.5+rhs.5,self.6+rhs.6,self.7+rhs.7,self.8+rhs.8,self.9+rhs.9,self.10+rhs.10)}fn sub(self,rhs:Self)->Self::Output{(self.0-rhs.0,self.1-rhs.1,self.2-rhs.2,self.3-rhs.3,self.4-rhs.4,self.5-rhs.5,self.6-rhs.6,self.7-rhs.7,self.8-rhs.8,self.9-rhs.9,self.10-rhs.10)}fn mul(self,rhs:Self)->Self::Output{(self.0*rhs.0,self.1*rhs.1,self.2*rhs.2,self.3*rhs.3,self.4*rhs.4,self.5*rhs.5,self.6*rhs.6,self.7*rhs.7,self.8*rhs.8,self.9*rhs.9,self.10*rhs.10)}fn div(self,rhs:Self)->Self::Output{(self.0/rhs.0,self.1/rhs.1,self.2/rhs.2,self.3/rhs.3,self.4/rhs.4,self.5/rhs.5,self.6/rhs.6,self.7/rhs.7,self.8/rhs.8,self.9/rhs.9,self.10/rhs.10)}}impl<T>TupleOps for(T,T,T,T,T,T,T,T,T,T,T,T)where T:Add<Output=T>+Sub<Output=T>+Mul<Output=T>+Div<Output=T>+Copy,{type Output=(T,T,T,T,T,T,T,T,T,T,T,T);fn add(self,rhs:Self)->Self::Output{(self.0+rhs.0,self.1+rhs.1,self.2+rhs.2,self.3+rhs.3,self.4+rhs.4,self.5+rhs.5,self.6+rhs.6,self.7+rhs.7,self.8+rhs.8,self.9+rhs.9,self.10+rhs.10,self.11+rhs.11)}fn sub(self,rhs:Self)->Self::Output{(self.0-rhs.0,self.1-rhs.1,self.2-rhs.2,self.3-rhs.3,self.4-rhs.4,self.5-rhs.5,self.6-rhs.6,self.7-rhs.7,self.8-rhs.8,self.9-rhs.9,self.10-rhs.10,self.11-rhs.11)}fn mul(self,rhs:Self)->Self::Output{(self.0*rhs.0,self.1*rhs.1,self.2*rhs.2,self.3*rhs.3,self.4*rhs.4,self.5*rhs.5,self.6*rhs.6,self.7*rhs.7,self.8*rhs.8,self.9*rhs.9,self.10*rhs.10,self.11*rhs.11)}fn div(self,rhs:Self)->Self::Output{(self.0/rhs.0,self.1/rhs.1,self.2/rhs.2,self.3/rhs.3,self.4/rhs.4,self.5/rhs.5,self.6/rhs.6,self.7/rhs.7,self.8/rhs.8,self.9/rhs.9,self.10/rhs.10,self.11/rhs.11)}}impl<T>TupleOps for(T,T,T,T,T,T,T,T,T,T,T,T,T)where T:Add<Output=T>+Sub<Output=T>+Mul<Output=T>+Div<Output=T>+Copy,{type Output=(T,T,T,T,T,T,T,T,T,T,T,T,T);fn add(self,rhs:Self)->Self::Output{(self.0+rhs.0,self.1+rhs.1,self.2+rhs.2,self.3+rhs.3,self.4+rhs.4,self.5+rhs.5,self.6+rhs.6,self.7+rhs.7,self.8+rhs.8,self.9+rhs.9,self.10+rhs.10,self.11+rhs.11,self.12+rhs.12)}fn sub(self,rhs:Self)->Self::Output{(self.0-rhs.0,self.1-rhs.1,self.2-rhs.2,self.3-rhs.3,self.4-rhs.4,self.5-rhs.5,self.6-rhs.6,self.7-rhs.7,self.8-rhs.8,self.9-rhs.9,self.10-rhs.10,self.11-rhs.11,self.12-rhs.12)}fn mul(self,rhs:Self)->Self::Output{(self.0*rhs.0,self.1*rhs.1,self.2*rhs.2,self.3*rhs.3,self.4*rhs.4,self.5*rhs.5,self.6*rhs.6,self.7*rhs.7,self.8*rhs.8,self.9*rhs.9,self.10*rhs.10,self.11*rhs.11,self.12*rhs.12)}fn div(self,rhs:Self)->Self::Output{(self.0/rhs.0,self.1/rhs.1,self.2/rhs.2,self.3/rhs.3,self.4/rhs.4,self.5/rhs.5,self.6/rhs.6,self.7/rhs.7,self.8/rhs.8,self.9/rhs.9,self.10/rhs.10,self.11/rhs.11,self.12/rhs.12)}}impl<T>TupleOps for(T,T,T,T,T,T,T,T,T,T,T,T,T,T)where T:Add<Output=T>+Sub<Output=T>+Mul<Output=T>+Div<Output=T>+Copy,{type Output=(T,T,T,T,T,T,T,T,T,T,T,T,T,T);fn add(self,rhs:Self)->Self::Output{(self.0+rhs.0,self.1+rhs.1,self.2+rhs.2,self.3+rhs.3,self.4+rhs.4,self.5+rhs.5,self.6+rhs.6,self.7+rhs.7,self.8+rhs.8,self.9+rhs.9,self.10+rhs.10,self.11+rhs.11,self.12+rhs.12,self.13+rhs.13)}fn sub(self,rhs:Self)->Self::Output{(self.0-rhs.0,self.1-rhs.1,self.2-rhs.2,self.3-rhs.3,self.4-rhs.4,self.5-rhs.5,self.6-rhs.6,self.7-rhs.7,self.8-rhs.8,self.9-rhs.9,self.10-rhs.10,self.11-rhs.11,self.12-rhs.12,self.13-rhs.13)}fn mul(self,rhs:Self)->Self::Output{(self.0*rhs.0,self.1*rhs.1,self.2*rhs.2,self.3*rhs.3,self.4*rhs.4,self.5*rhs.5,self.6*rhs.6,self.7*rhs.7,self.8*rhs.8,self.9*rhs.9,self.10*rhs.10,self.11*rhs.11,self.12*rhs.12,self.13*rhs.13)}fn div(self,rhs:Self)->Self::Output{(self.0/rhs.0,self.1/rhs.1,self.2/rhs.2,self.3/rhs.3,self.4/rhs.4,self.5/rhs.5,self.6/rhs.6,self.7/rhs.7,self.8/rhs.8,self.9/rhs.9,self.10/rhs.10,self.11/rhs.11,self.12/rhs.12,self.13/rhs.13)}}impl<T>TupleOps for(T,T,T,T,T,T,T,T,T,T,T,T,T,T,T)where T:Add<Output=T>+Sub<Output=T>+Mul<Output=T>+Div<Output=T>+Copy,{type Output=(T,T,T,T,T,T,T,T,T,T,T,T,T,T,T);fn add(self,rhs:Self)->Self::Output{(self.0+rhs.0,self.1+rhs.1,self.2+rhs.2,self.3+rhs.3,self.4+rhs.4,self.5+rhs.5,self.6+rhs.6,self.7+rhs.7,self.8+rhs.8,self.9+rhs.9,self.10+rhs.10,self.11+rhs.11,self.12+rhs.12,self.13+rhs.13,self.14+rhs.14)}fn sub(self,rhs:Self)->Self::Output{(self.0-rhs.0,self.1-rhs.1,self.2-rhs.2,self.3-rhs.3,self.4-rhs.4,self.5-rhs.5,self.6-rhs.6,self.7-rhs.7,self.8-rhs.8,self.9-rhs.9,self.10-rhs.10,self.11-rhs.11,self.12-rhs.12,self.13-rhs.13,self.14-rhs.14)}fn mul(self,rhs:Self)->Self::Output{(self.0*rhs.0,self.1*rhs.1,self.2*rhs.2,self.3*rhs.3,self.4*rhs.4,self.5*rhs.5,self.6*rhs.6,self.7*rhs.7,self.8*rhs.8,self.9*rhs.9,self.10*rhs.10,self.11*rhs.11,self.12*rhs.12,self.13*rhs.13,self.14*rhs.14)}fn div(self,rhs:Self)->Self::Output{(self.0/rhs.0,self.1/rhs.1,self.2/rhs.2,self.3/rhs.3,self.4/rhs.4,self.5/rhs.5,self.6/rhs.6,self.7/rhs.7,self.8/rhs.8,self.9/rhs.9,self.10/rhs.10,self.11/rhs.11,self.12/rhs.12,self.13/rhs.13,self.14/rhs.14)}}impl<T>TupleOps for(T,T,T,T,T,T,T,T,T,T,T,T,T,T,T,T)where T:Add<Output=T>+Sub<Output=T>+Mul<Output=T>+Div<Output=T>+Copy,{type Output=(T,T,T,T,T,T,T,T,T,T,T,T,T,T,T,T);fn add(self,rhs:Self)->Self::Output{(self.0+rhs.0,self.1+rhs.1,self.2+rhs.2,self.3+rhs.3,self.4+rhs.4,self.5+rhs.5,self.6+rhs.6,self.7+rhs.7,self.8+rhs.8,self.9+rhs.9,self.10+rhs.10,self.11+rhs.11,self.12+rhs.12,self.13+rhs.13,self.14+rhs.14,self.15+rhs.15)}fn sub(self,rhs:Self)->Self::Output{(self.0-rhs.0,self.1-rhs.1,self.2-rhs.2,self.3-rhs.3,self.4-rhs.4,self.5-rhs.5,self.6-rhs.6,self.7-rhs.7,self.8-rhs.8,self.9-rhs.9,self.10-rhs.10,self.11-rhs.11,self.12-rhs.12,self.13-rhs.13,self.14-rhs.14,self.15-rhs.15)}fn mul(self,rhs:Self)->Self::Output{(self.0*rhs.0,self.1*rhs.1,self.2*rhs.2,self.3*rhs.3,self.4*rhs.4,self.5*rhs.5,self.6*rhs.6,self.7*rhs.7,self.8*rhs.8,self.9*rhs.9,self.10*rhs.10,self.11*rhs.11,self.12*rhs.12,self.13*rhs.13,self.14*rhs.14,self.15*rhs.15)}fn div(self,rhs:Self)->Self::Output{(self.0/rhs.0,self.1/rhs.1,self.2/rhs.2,self.3/rhs.3,self.4/rhs.4,self.5/rhs.5,self.6/rhs.6,self.7/rhs.7,self.8/rhs.8,self.9/rhs.9,self.10/rhs.10,self.11/rhs.11,self.12/rhs.12,self.13/rhs.13,self.14/rhs.14,self.15/rhs.15)}}